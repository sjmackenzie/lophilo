= TODO =

== Conversion recipe ==

* _mem_write and _mem_read functions 
** take and return uint64_t instead of uint32_t 
** take a size parameter
* CPUReadMemoryFunc is deprecated; use MemoryRegionOps instead
* VMState saving functions have been replaced by VMStateDescription structures
** heavy use of macros
** replace any additional action with a .post_load function
* State
** move any register to the State structure
* Memory allocation
** cpu_register_io_memory is replaced by memory_region_init_io

* Init
** reset, qemu_register_reset and register_savevm calls are unnecessary
** these are done through setting callbacks in _class_init
** function returns int (0) instead of void
* register and device_init have been replaced by type registration (and eventual instantiation)

* _reset
** _reset function takes a DeviceState* instead of void*
** to retrieve the state, use: `= container_of(d, PMCState, busdev.qdev);`

*SysBusDeviceInfo becomes TypeInfo with paranet TYPE_SYS_BUS_DEVICE

* qdev_get_vlan_client 
** replaced by a struct NetClientInfo
** registered with qemu_new_nic
** takes in a NICConf parameter (stored in the state)

* for machine
** flash.h must be included explicitly if using flash functions

== Conversion QEMU 0.11 to QEMU 1.0 ==

* list of files to move
** hw/at91*
** hw/spi_flash.c (with update to hw/flash.h)

* Move up at91 source against QEMU HEAD
** cpu_register_physical_memory 
*** MemoryRegion
*** memory_region_init_ram
*** vmstate_register_ram_global
*** memory_region_add_subregion

** IO_MEM_RAM -> ???
** IO_MEM
** IF_PFLASH -> ???
** qemu_mallocz -> g_new
** qemu_ram_alloc -> g_new
** CPUState -> CPUARMState
** CPUState.regs -> ??
* Submit patches for at91* to QEMU

== Adapt to real hardware ==

* create lophilo.c that copies at91sam9.c into a separate instance
** update the CPU
** update hardware configuration to match ours
** remove norflash and nandflash (not connected in our configuration)
** change chip select for DDR RAM to 1, not 0 (zero is connected to the FPGA)
*** at91_sdramc0 -> at91_sdramc1
* Get DDR initialization with at91bootstrap working
* Get Serial port working (DBGU? USART? both?)
** at91sam9_state->dbgu is commented out
** usart0_regs are present
* Get SD Card working

= SPI =

AT91_SPI0_BASE (interrupt 14): 0xFFFA4000


boot room (assembly code equivalent)
	SPI read from flash and copy to internal SRAM (0x00300000)
	Branch to 0x00300000

load directly the "bootrom" to 0x0030000
setup c
write code to branch to 0x00300000	

= usage =

sudo /etc/qemu-ifup tap0
sudo ./mini2440/mini2440_start.sh
MINI2440 # dhcp
MINI2440 # mmcinit
MINI2440 # bootm

setenv bootargs console=s3c2410_serial0,115200 ip=dhcp noinitrd init=/sbin/init root=/dev/nfs rw nfsroot=10.236.10.94:/exports/mini2440/armel-squeeze nfsrootdebug

setenv bootargs ${bootargs} single

= interesting =

http://balau82.wordpress.com/2010/04/12/booting-linux-with-u-boot-on-qemu-arm/

= kernel 3.3 rc1: s3c_uart_write: Bad register 0x2c =

~/qemu/hw/s3c2410.c: 

static void s3c_uart_write(void *opaque, target_phys_addr_t addr,
                uint32_t value)
{
    [...]
    default:
        printf("%s: Bad register 0x%lx\n", __FUNCTION__, (unsigned long)addr);
    }
}


= qemu build =

wget http://repo.or.cz/w/qemu/mini2440.git/snapshot/18b91f222c2aebb2eb45cb7e6d5f58ca668e2aa2.tar.gz
tar xvfz 18b91f222c2aebb2eb45cb7e6d5f58ca668e2aa2.tar.gz
cd mini2440
apt-get install libsdl-dev
./configure --prefix=/home/rngadam/qemu --target-list=arm-softmmu --kerneldir=/home/rngadam/linux-stable

= reducing network access =

http://www.digriz.org.uk/debian-nfs-root

= compile options for FriendlyARM =

-Wall -O0 -ansi -pedantic -msoft-float -D__GCC_FLOAT_NOT_NEEDED  -march=armv4t -mtune=arm920t 

= qemu 1.0 build =

sudo apt-get install glib2.0-dev zlib1g-dev
./configure --target-list=arm-softmmu --enable-trace-backend=simple --prefix=$HOME/lophilo-bin
make
make install

= running =

 -trace events=/tmp/events 

= beagleboard support =

http://www.cnx-software.com/2011/09/26/beagleboard-emulator-in-ubuntu-with-qemu/
http://balau82.wordpress.com/2010/02/28/hello-world-for-bare-metal-arm-using-qemu/

= original compile =

61.99user 59.69system 2:15.25elapsed 89%CPU (0avgtext+0avgdata 226576maxresident)k
53304inputs+106880outputs (43major+1232654minor)pagefaults 0swaps

63.63user 60.86system 2:07.64elapsed 97%CPU (0avgtext+0avgdata 226576maxresident)k
0inputs+106880outputs (0major+1232735minor)pagefaults 0swaps

= ccache/distcc (no distribution, no cnshaqs10) =

22.94user 28.63system 1:06.77elapsed 77%CPU (0avgtext+0avgdata 226544maxresident)k
61640inputs+115952outputs (71major+535191minor)pagefaults 0swaps

= ccache/distcc redo =

2.74user 10.88system 0:16.97elapsed 80%CPU (0avgtext+0avgdata 226576maxresident)k
72inputs+54504outputs (0major+221336minor)pagefaults 0swaps

after ccache -C and clean:

60.83user 80.71system 2:32.14elapsed 93%CPU (0avgtext+0avgdata 226576maxresident)k
0inputs+330328outputs (0major+1721312minor)pagefaults 0swaps

make clean:

2.66user 10.66system 0:15.50elapsed 85%CPU (0avgtext+0avgdata 226576maxresident)k
0inputs+54504outputs (0major+221300minor)pagefaults 0swaps


= gold linker =


sudo apt-get install binutils-gold

make[1]: Leaving directory `/home/rngadam/upstream/qemu'
56.28user 75.36system 2:21.18elapsed 93%CPU (0avgtext+0avgdata 133728maxresident)k
624inputs+330648outputs (68major+1707172minor)pagefaults 0swaps

make clean

2.12user 10.06system 0:14.72elapsed 82%CPU (0avgtext+0avgdata 112480maxresident)k
0inputs+54824outputs (65major+207223minor)pagefaults 0swaps

= with /tmp is tmpfs =

ccache is supposed to use it too...

make[1]: Leaving directory `/home/rngadam/upstream/qemu'
56.59user 73.59system 2:21.72elapsed 91%CPU (0avgtext+0avgdata 133728maxresident)k
112inputs+77616outputs (65major+1707207minor)pagefaults 0swaps


layers....

sudo unionfs-fuse -o cow,max_files=32768 -o allow_other,use_ino,suid,dev,nonempty /tmp=RW:/home/rngadam/upstream/qemu=RO  /home/rngadam/upstream/qemu-unionfs

make[1]: Leaving directory `/home/rngadam/upstream/qemu-unionfs'
54.36user 95.42system 3:25.97elapsed 72%CPU (0avgtext+0avgdata 129600maxresident)k
256752inputs+59144outputs (713major+1691973minor)pagefaults 0swaps

sudo mount -t aufs -o br=/tmp:/home/rngadam/upstream/qemu none /home/rngadam/upstream/qemu-aufs

make[1]: Leaving directory `/home/rngadam/upstream/qemu-aufs'
54.82user 75.37system 2:22.66elapsed 91%CPU (0avgtext+0avgdata 133728maxresident)k
80inputs+24536outputs (0major+1707652minor)pagefaults 0swaps

mount -t overlayfs overlayfs -olowerdir=/home/rngadam/upstream/qemu,upperdir=/tmp /home/rngadam/upstream/qemu-overlayfs

55.82user 74.23system 2:28.70elapsed 87%CPU (0avgtext+0avgdata 133728maxresident)k
0inputs+24536outputs (0major+1707406minor)pagefaults 0swaps

= change to virtualbox =

pae memory
i/o host memory cache

after fresh boot:

58.36user 72.80system 2:24.93elapsed 90%CPU (0avgtext+0avgdata 133728maxresident)k
77632inputs+77616outputs (407major+1705767minor)pagefaults 0swaps


bumping up the -j

61.77user 75.45system 2:22.17elapsed 96%CPU (0avgtext+0avgdata 133728maxresident)k
16inputs+79616outputs (65major+1706708minor)pagefaults 0swaps

ramfs

sudo mount -t ramfs my_ramfs /home/rngadam/upstream/qemu-ramfs -o size=150m,maxsize=150m

114.05user 121.00system 4:03.11elapsed 96%CPU (0avgtext+0avgdata 556672maxresident)k
688inputs+48040outputs (3major+2465373minor)pagefaults 0swaps


= clang =

$ ../configure --prefix=$INSTALL --target-list=i386-bsd-user \
  --enable-tcg-interpreter \
  --cc=clang

  LINK  arm-softmmu/qemu-system-arm
make[1]: Leaving directory `/home/rngadam/upstream/qemu'
47.69user 76.72system 2:12.19elapsed 94%CPU (0 avgtext+0avgdata 122832maxresident)k
6800inputs+71400outputs (102major+2593584minor)pagefaults 0swaps
