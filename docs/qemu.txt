
= usage =

sudo /etc/qemu-ifup tap0
sudo ./mini2440/mini2440_start.sh
MINI2440 # dhcp
MINI2440 # mmcinit
MINI2440 # bootm

setenv bootargs console=s3c2410_serial0,115200 ip=dhcp noinitrd init=/sbin/init root=/dev/nfs rw nfsroot=10.236.10.94:/exports/mini2440/armel-squeeze nfsrootdebug

setenv bootargs ${bootargs} single

= interesting =

http://balau82.wordpress.com/2010/04/12/booting-linux-with-u-boot-on-qemu-arm/

= kernel 3.3 rc1: s3c_uart_write: Bad register 0x2c =

~/qemu/hw/s3c2410.c: 

static void s3c_uart_write(void *opaque, target_phys_addr_t addr,
                uint32_t value)
{
    [...]
    default:
        printf("%s: Bad register 0x%lx\n", __FUNCTION__, (unsigned long)addr);
    }
}


= qemu build =

wget http://repo.or.cz/w/qemu/mini2440.git/snapshot/18b91f222c2aebb2eb45cb7e6d5f58ca668e2aa2.tar.gz
tar xvfz 18b91f222c2aebb2eb45cb7e6d5f58ca668e2aa2.tar.gz
cd mini2440
apt-get install libsdl-dev
./configure --prefix=/home/rngadam/qemu --target-list=arm-softmmu --kerneldir=/home/rngadam/linux-stable

= reducing network access =

http://www.digriz.org.uk/debian-nfs-root

= compile options for FriendlyARM =

-Wall -O0 -ansi -pedantic -msoft-float -D__GCC_FLOAT_NOT_NEEDED  -march=armv4t -mtune=arm920t 

= qemu 1.0 build =

sudo apt-get install glib2.0-dev zlib1g-dev
./configure --target-list=arm-softmmu --enable-trace-backend=simple --prefix=$HOME/lophilo-bin
make install

= running =

 -trace events=/tmp/events 
= Lophilo target =

* ARM926EJ-S
* AC'97 controller


= Other examples =

* Machines have a descriptor QEMUMachine
* Machines all have a state structure defining buses, memory and registers
* functions to read, write these registers are provided
* the control registers are set in the init function with cpu_register_io_memory and registered with sysbus_init_mmio
* a primary interrupt control with read/write/set functions is also created
* the init function 
** takes a kernel image to load in
** initialize the CPU with cpu_init (and later, arm_cpu_init)
** initialize RAM and sets the various subregions
** creates various devices on the system bus
** passes kernel parameters to struct arm_boot_info

everything is registered through this:

static void integratorcp_machine_init(void)
{
    qemu_register_machine(&integratorcp_machine);
}

machine_init(integratorcp_machine_init);

** kicks off boot with arm_load_kernel(CPUState*, struct* arm_boot_info);

= beagleboard support =

http://www.cnx-software.com/2011/09/26/beagleboard-emulator-in-ubuntu-with-qemu/
http://balau82.wordpress.com/2010/02/28/hello-world-for-bare-metal-arm-using-qemu/
